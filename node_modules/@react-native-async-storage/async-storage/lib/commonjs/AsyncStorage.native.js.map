{"version":3,"names":["RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","checkValidInput","multiGet","errors","result","value","errs","convertErrors","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","convertError","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs","checkValidArgs"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from './helpers';\nimport RCTAsyncStorage from './RCTAsyncStorage';\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from './types';\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\n\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n        resolve: null as any,\n        reject: null as any,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}