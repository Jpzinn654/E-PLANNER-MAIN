{"version":3,"sources":["reanimatedWrapper.ts"],"names":["Reanimated","require","setGestureState","console","warn","e"],"mappings":";;;;;;;AAKA;;AAMA,IAAIA,UAAJ;;;AAkBA,IAAI;AACF,uBAAAA,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AAEA,MAAI,CAACD,UAAU,CAACE,eAAhB,EAAiC;AAC/BF,IAAAA,UAAU,CAACE,eAAX,GAA6B,MAAM;AACjC;;AACAC,MAAAA,OAAO,CAACC,IAAR,CACE,uBACE,gGADF,CADF;AAKD,KAPD;AAQD,GAZC,CAaF;AACA;AACA;;AACD,CAhBD,CAgBE,OAAOC,CAAP,EAAU,CAAE","sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        tagMessage(\n          'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n        )\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"]}